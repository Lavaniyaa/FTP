# Generated by binpac_quickstart

refine flow FTPDEMO_Flow += {
	function proc_ftpdemo_message(msg: FTPDEMO_PDU,val: bool): bool
		%{
		 char d;
		 char  *buffer,*bufferA;
		 char message[20];
		 int ip[4], port[2];
		 int i;
		 int *port_num; 	
		 unsigned char *reply = ${msg.reply_line.reply}.data();
                 char zip_signature[] = "PK";
		 char exe_signature[] = "MZ";
		 char passive[] = "227 ";
		 char portcomm[] = "PORT ";
		 char* strvalue = reinterpret_cast<char*>(reply);
		 cout<<"\nWhat now"<<${val};		
		 if(!(strncmp(strvalue,zip_signature,2)))
			cout<<"\n Its a zip file!!";
		 if(!(strncmp(strvalue,exe_signature,2)))
			cout<<"\n Its an exe file!!";
		 if(${val}){
			cout<<"\n Finally!!";
		 //std::cout<<std::hex<<${msg.request_line.request}.data();
                 unsigned char *request = ${msg.request_line.request}.data();
                 cout<<"\n New:"<<request;
                 }
		 if(!(strncmp(strvalue,passive,3)) ){
			cout<<"\n Port details are being passed";
		 buffer = strvalue;		 
		 buffer = buffer + 4;
 		 while ((d = *buffer) != '\0' && !isdigit(d))
            		buffer++;
		 i = sscanf(buffer, "%d,%d,%d,%d,%d,%d",&ip[0], &ip[1], &ip[2], &ip[3],&port[0], &port[1]);
		 printf("\n PORTS:  %d %d \n",port[0],port[1]);
		 *port_num = (port[0] * 256 ) + port[1];
		 cout<<"\n Port numbers: "<<*port_num<<"\n"; 
		 } 
		 //std::cout<<std::hex<<${msg.request_line.request}.data();
		 //unsigned char *request = ${msg.request_line.request}.data();
		// cout<<"\n New:"<<request;
/*		 char* strvalue1 = reinterpret_cast<char*>(request);
		 cout<<"\n"<<*strvalue1;
		 if(!(strncmp(strvalue1,portcomm,4)) ){
                        cout<<"\n Port details are being passed";
                 bufferA = strvalue1;
                 bufferA = bufferA + 5;
                 while ((d = *bufferA) != '\0' && !isdigit(d))
                        bufferA++;
                 i = sscanf(bufferA, "%d,%d,%d,%d,%d,%d",&ip[0], &ip[1], &ip[2], &ip[3],&port[0], &port[1]);
                 printf("\n PORTS:  %d %d \n",port[0],port[1]);
                 *port_num = (port[0] * 256 ) + port[1];
                 cout<<"\n Port numbers: "<<*port_num<<"\n";
                 }*/
		 return true;
		%}
};

refine typeattr FTPDEMO_PDU += &let {
	proc: bool = $context.flow.proc_ftpdemo_message(this,is_orig);
};
